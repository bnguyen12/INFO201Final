),
tabPanel("Most Recent Emissions",
plotOutput("map.current", click = clickOpts(id = "map_click"), width = "150%", height = "400px")
)
)
)
)
)
my.ui <- fluidPage(
#Creates a side bar that contains a selectInput bar and a slider.
#User selected inputs are reflected in the table.
sidebarLayout(
sidebarPanel(
selectInput("State", "Select A State",
choices = greenhouse.gases_df$Country.Code,
selected = ""),
sliderInput("years", "Select years to be shown",
min = 1998, max = 2014, value = 2007,
sep = "")
),
#Creates a main panel in which a table is desvcribed for user's information in a small paragraph
#as well as setting up tabs. One tab is KT emissions data, one for PC data, and the default tab is
#for all pprovided data on the user specified input contained within the data frame.
mainPanel(
titlePanel("GreenHouse Gasses Data"),
p("Below is a table that provides the Greenhouse gasses data of a user selected state
with a focus on CO2 emissions in metric tons per capita and CO2 emissions kt. The slider
takes in a user selected year and compares it with the most recent data for the selected
state code of that year."),
tabsetPanel(type = "tabs",
tabPanel("Table", DT::dataTableOutput("gTable")),
tabPanel("kt data",  DT::dataTableOutput("kt.table")),
tabPanel("per capita data",  DT::dataTableOutput("pc.table"))
),
tableFooter(("Key for table:"), )
?tableFooter()
)
),
sidebarLayout(
sidebarPanel(
selectInput("emissions", "Emissions Type",
choices = c("Metric Tons Per Capita", "Kilotons Per Capita"),
selected = ""),
sliderInput("emission.year", "Year displayed",
min = 1998, max = 2014, value = 2007,
sep = ""),
p("Map Details", textOutput("description"))
),
mainPanel(
titlePanel("Map of Greenhouse Gasses in the World"),
textOutput("map.details"),
tabsetPanel(type = "tabs",
tabPanel("Selected Year Map",
plotOutput("map", click = clickOpts(id = "map_click"), width = "150%", height = "400px")
),
tabPanel("Most Recent Emissions",
plotOutput("map.current", click = clickOpts(id = "map_click"), width = "150%", height = "400px")
)
)
)
)
)
my.ui <- fluidPage(
#Creates a side bar that contains a selectInput bar and a slider.
#User selected inputs are reflected in the table.
sidebarLayout(
sidebarPanel(
selectInput("State", "Select A State",
choices = greenhouse.gases_df$Country.Code,
selected = ""),
sliderInput("years", "Select years to be shown",
min = 1998, max = 2014, value = 2007,
sep = "")
),
#Creates a main panel in which a table is desvcribed for user's information in a small paragraph
#as well as setting up tabs. One tab is KT emissions data, one for PC data, and the default tab is
#for all pprovided data on the user specified input contained within the data frame.
mainPanel(
titlePanel("GreenHouse Gasses Data"),
p("Below is a table that provides the Greenhouse gasses data of a user selected state
with a focus on CO2 emissions in metric tons per capita and CO2 emissions kt. The slider
takes in a user selected year and compares it with the most recent data for the selected
state code of that year."),
tabsetPanel(type = "tabs",
tabPanel("Table", DT::dataTableOutput("gTable")),
tabPanel("kt data",  DT::dataTableOutput("kt.table")),
tabPanel("per capita data",  DT::dataTableOutput("pc.table"))
),
tableFooter(("Key for table:") )
)
),
sidebarLayout(
sidebarPanel(
selectInput("emissions", "Emissions Type",
choices = c("Metric Tons Per Capita", "Kilotons Per Capita"),
selected = ""),
sliderInput("emission.year", "Year displayed",
min = 1998, max = 2014, value = 2007,
sep = ""),
p("Map Details", textOutput("description"))
),
mainPanel(
titlePanel("Map of Greenhouse Gasses in the World"),
textOutput("map.details"),
tabsetPanel(type = "tabs",
tabPanel("Selected Year Map",
plotOutput("map", click = clickOpts(id = "map_click"), width = "150%", height = "400px")
),
tabPanel("Most Recent Emissions",
plotOutput("map.current", click = clickOpts(id = "map_click"), width = "150%", height = "400px")
)
)
)
)
)
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
?toggleState()
useShinyjs(rmd = TRUE)
install.packages("shinyjs")
library("shinyjs")
useShinyjs(rmd = TRUE)
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
source("setup.R")
ili.data.2015.2016 <- read.csv("./data/Washington_FluView_BySeason_2015-2016.csv", stringsAsFactors = FALSE)
ili.data.2017.2018 <- read.csv("./data/Washington_FluView_BySeason_2017-2018.csv", stringsAsFactors = FALSE)
flu.mortality.2015.2018 <- read.csv("./data/PedFluDeath_WeeklyData_2015-2018.csv", stringsAsFactors = FALSE)
ili.data <- full_join(ili.data.2015.2016, ili.data.2017.2018)
ili.data <- ili.data %>% select(YEAR, WEEK, ILITOTAL, TOTAL.PATIENTS,
X.UNWEIGHTED.ILI, NUM..OF.PROVIDERS) %>%
rename(PERCENT_UNWEIGHTED_ILI = X.UNWEIGHTED.ILI,
NUMBER_OF_PROVIDERS = NUM..OF.PROVIDERS)
setwd("C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/INFO201Final")
ili.data.2015.2016 <- read.csv("./data/Washington_FluView_BySeason_2015-2016.csv", stringsAsFactors = FALSE)
ili.data.2017.2018 <- read.csv("./data/Washington_FluView_BySeason_2017-2018.csv", stringsAsFactors = FALSE)
flu.mortality.2015.2018 <- read.csv("./data/PedFluDeath_WeeklyData_2015-2018.csv", stringsAsFactors = FALSE)
ili.data <- full_join(ili.data.2015.2016, ili.data.2017.2018)
ili.data <- ili.data %>% select(YEAR, WEEK, ILITOTAL, TOTAL.PATIENTS,
X.UNWEIGHTED.ILI, NUM..OF.PROVIDERS) %>%
rename(PERCENT_UNWEIGHTED_ILI = X.UNWEIGHTED.ILI,
NUMBER_OF_PROVIDERS = NUM..OF.PROVIDERS)
source("setup.R")
ili.data <- full_join(ili.data.2015.2016, ili.data.2017.2018)
ili.data <- ili.data %>% select(YEAR, WEEK, ILITOTAL, TOTAL.PATIENTS,
X.UNWEIGHTED.ILI, NUM..OF.PROVIDERS) %>%
rename(PERCENT_UNWEIGHTED_ILI = X.UNWEIGHTED.ILI,
NUMBER_OF_PROVIDERS = NUM..OF.PROVIDERS)
#Contains flu mortality as well as ili reported cases
flu.mortality.ili.data <- na.omit(full_join(flu.mortality.2015.2018, ili.data))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017") %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
map1 <- ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017", WEEK = 45:52) %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017", WEEK == 45:52) %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017", WEEK == C(45:52)) %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017", WEEK == C("45, 46, 52")) %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017", WEEK == C("45", "46", "52")) %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017", WEEK > 45) %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2018", WEEK > 45) %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2018") %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2016", WEEK > 40) %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2016") %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2016", week >10) %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2016", week >15) %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2016", WEEK >15) %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2016", WEEK > 20) %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2016", WEEK > 30) %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2016", WEEK > 8) %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2016", WEEK > 8:10) %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2016", WEEK > 8:10) %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2016", WEEK == 8:10) %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2016", WEEK > 8 & WEEK < 10) %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2016", (WEEK > 8 & WEEK < 10)) %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2016", (WEEK > 2 & WEEK < 10)) %>%
mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
library("shiny")
shinyApp(ui = my.ui, server = my.server)
my.server <- function(input, output) {
}
my.ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("trend.select", choices = c("2016 Trend", "2017 Trend",
"Current Year"), selected = "")
),
mainPanel(
)
)
)
shinyApp(ui = my.ui, server = my.server)
my.ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("trend.select", "Select a Trend", choices = c("2016 Trend", "2017 Trend",
"Current Year"), selected = "")
),
mainPanel(
)
)
)
shinyApp(ui = my.ui, server = my.server)
my.server <- function(input, output) {
output$ili.map <- renderPlot({
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
})
}
shinyApp(ui = my.ui, server = my.server)
my.server <- function(input, output) {
output$ili.map <- renderPlot({
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
})
}
my.ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("trend.select", "Select a Trend", choices = c("2016 Trend", "2017 Trend",
"Current Year"), selected = "")
),
mainPanel(
plotOutput("ili.map")
)
)
)
shinyApp(ui = my.ui, server = my.server)
my.ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("trend.select", "Select a Trend", choices = c("2016 Trend", "2017 Trend",
"Current Year"), selected = "")
),
mainPanel(
titlePanel("Influenza Like Illnesses compared to Death Rates"),
plotOutput("ili.map")
)
)
)
my.server <- function(input, output) {
output$ili.map <- renderPlot({
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
})
}
shinyApp(ui = my.ui, server = my.server)
#Contains flu mortality as well as ili reported cases
flu.mortality.ili.data <- na.omit(full_join(flu.mortality.2015.2018, ili.data))
flu.mortality.ili.data <- flu.mortality.ili.data %>% mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017", (WEEK > 2 & WEEK < 10))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017", (WEEK > 2 & WEEK < 10))
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017", (WEEK > 2 & WEEK < 8))
output$ili.map <- renderPlot({
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
})
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017", (WEEK > 2 & WEEK < 8))
output$ili.map <- renderPlot({
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
})
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017", (WEEK > 40 & WEEK < 52))
output$ili.map <- renderPlot({
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
})
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017", (WEEK > 45 & WEEK < 52))
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017", (WEEK > 50 & WEEK < 52))
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017", (WEEK > 49 & WEEK < 52))
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017", (WEEK > 40 & WEEK < 45))
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
shinyApp(ui = my.ui, server = my.server)
my.server <- function(input, output) {
if(input$trend.select == "2015 Trend"){
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017", (WEEK > 40 & WEEK < 45))
output$ili.map <- renderPlot({
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
})
}
#2-10 weeks for 2016 data trend
if(input$trend.select == "2016 Trend"){
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2016", (WEEK > 2 & WEEK < 10))
output$ili.map <- renderPlot({
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
})
}
if(input$trend.select == "2017 Trend"){
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017", (WEEK > 40 & WEEK < 45))
output$ili.map <- renderPlot({
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
})
}
if(input$trend.select == "Current Year"){
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017", (WEEK > 40 & WEEK < 45))
output$ili.map <- renderPlot({
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
})
}
}
my.ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("trend.select", "Select a Trend", choices = c("2015 Trend" ,"2016 Trend", "2017 Trend",
"Current Year"), selected = "")
),
mainPanel(
titlePanel("Influenza like illnesses compared to Death Rates"),
plotOutput("ili.map")
)
)
)
my.server <- function(input, output) {
if(input$trend.select == "2015 Trend"){
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017", (WEEK > 40 & WEEK < 45))
output$ili.map <- renderPlot({
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
})
}
#2-10 weeks for 2016 data trend
if(input$trend.select == "2016 Trend"){
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2016", (WEEK > 2 & WEEK < 10))
output$ili.map <- renderPlot({
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
})
}
if(input$trend.select == "2017 Trend"){
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017", (WEEK > 40 & WEEK < 45))
output$ili.map <- renderPlot({
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
})
}
if(input$trend.select == "Current Year"){
flu.mortality.ili.data.2016 <- flu.mortality.ili.data %>% filter(YEAR == "2017", (WEEK > 40 & WEEK < 45))
output$ili.map <- renderPlot({
ggplot(data = flu.mortality.ili.data.2016, aes(x = WEEK, y = Percentage, group = YEAR)) +
geom_line(aes(y = PERCENT_UNWEIGHTED_ILI, color = "ili cases")) +
geom_line(aes(y = DEATH_RATE, color = "Deaths"))
})
}
}
shinyApp(ui = my.ui, server = my.server)
shinyApp(ui = my.ui, server = my.server)
shinyApp(ui = my.ui, server = my.server)
shinyApp(ui = my.ui, server = my.server)
shinyApp(ui = my.ui, server = my.server)
runApp('iliFactor.R')
runApp('iliFactor.R')
runApp('iliFactor.R')
runApp('iliFactor.R')
flu.mortality.ili.data.year <- flu.mortality.ili.data %>% filter(YEAR == "2015", (WEEK > 40 & WEEK < 45))
View(flu.mortality.ili.data.year)
flu.mortality.ili.data.year <- flu.mortality.ili.data %>% filter(YEAR == "2015")
flu.mortality.ili.data.year <- flu.mortality.ili.data %>% filter(YEAR == "2017")
runApp('iliFactor.R')
runApp('iliFactor.R')
runApp('iliFactor.R')
runApp('iliFactor.R')
runApp('iliFactor.R')
runApp('iliFactor.R')
runApp('iliFactor.R')
