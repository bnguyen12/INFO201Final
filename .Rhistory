row.names(vcs.df) <- c("Percentage", "Students")
vcs.percentages <- c(expert.vcs.Exp.Percentage, intermed.vcs.Exp.Percentage,
few.vcs.Exp.Percentage, never.vcs.Exp.Percentage)
vcs.students <- c(never.vcs.Exp, few.vcs.Exp, intermed.vcs.Exp, expert.vcs.Exp)
vcs.percentages <- c(expert.vcs.Exp.Percentage, intermed.vcs.Exp.Percentage,
few.vcs.Exp.Percentage, never.vcs.Exp.Percentage)
vcs.students <- c(never.vcs.Exp, few.vcs.Exp, intermed.vcs.Exp, expert.vcs.Exp)
vcs.students <- c(never.vcs.Exp, few.vcs.Exp, intermed.vcs.Exp, expert.vcs.Exp)
vcs.percentages <- c(expert.vcs.Exp.Percentage, intermed.vcs.Exp.Percentage,
few.vcs.Exp.Percentage, never.vcs.Exp.Percentage)
expert.vcs.Exp.Percentage
#Percentage calculations for version control
expert.vcs.Exp.Percentage <- paste0(round((expert.vcs.Exp / total.students) * 100, 0), "%")
intermed.vcs.Exp.Percentage <- paste0(round((intermed.vcs.Exp / total.students) * 100, 0), "%")
few.vcs.Percentage <- paste0(round((few.vcs.Exp / total.students) * 100, 0), "%")
never.vcs.Percentage <- paste0(round((never.vcs.Exp / total.students) * 100, 0), "%")
vcs.percentages <- c(expert.vcs.Exp.Percentage, intermed.vcs.Exp.Percentage,
few.vcs.Exp.Percentage, never.vcs.Exp.Percentage)
few.vcs.Exp.Percentage <- paste0(round((few.vcs.Exp / total.students) * 100, 0), "%")
never.vcs.Exp.Percentage <- paste0(round((never.vcs.Exp / total.students) * 100, 0), "%")
vcs.percentages <- c(expert.vcs.Exp.Percentage, intermed.vcs.Exp.Percentage,
few.vcs.Exp.Percentage, never.vcs.Exp.Percentage)
vcs.students <- c(never.vcs.Exp, few.vcs.Exp, intermed.vcs.Exp, expert.vcs.Exp)
version.expert.exp <- c(expert.vcs.Exp.Percentage, expert.vcs.Exp)
version.intermed.exp <- c(intermed.vcs.Exp.Percentage, intermed.vcs.Exp )
version.few.exp <- c(few.vcs.Exp.Percentage, few.vcs.Exp)
version.never.exp <- c(never.vcs.Exp.Percentage, never.vcs.Exp )
vcs.df <- data.frame(version.expert.exp, version.intermed.exp, version.few.exp, version.never.exp)
colnames(vcs.df) <- c("Never Coded", "Experimented with Code",
"Intermediate User", "Expert User")
row.names(vcs.df) <- c("Percentage", "Students")
View(vcs.df)
version.never.exp
version.expert.exp
vcs.df <- data.frame(version.never.exp, version.few.exp, version.intermed.exp, version.expert.exp)
colnames(vcs.df) <- c("Never Coded", "Experimented with Code",
"Intermediate User", "Expert User")
row.names(vcs.df) <- c("Percentage", "Students")
#Data frame construction
percentages <- c(expert.md.Exp.Percentage, intermed.md.Exp.Percentage,
few.Exp.Percentage, never.Exp.Percentage)
students <- c(never.md.Exp, few.md.Exp, intermed.md.Exp, expert.md.Exp)
markdown.expert.exp <- c(expert.md.Exp.Percentage, expert.md.Exp)
markdown.intermed.exp <- c(intermed.md.Exp.Percentage, intermed.md.Exp )
markdown.few.exp <- c(few.md.Exp.Percentage, few.md.Exp)
markdown.never.exp <- c(never.md.Exp.Percentage, never.md.Exp)
few.md.Exp.Percentage <- paste0(round((few.md.Exp / total.students) * 100, 0), "%")
never.md.Exp.Percentage <- paste0(round((never.md.Exp / total.students) * 100, 0), "%")
#Data frame construction
percentages <- c(expert.md.Exp.Percentage, intermed.md.Exp.Percentage,
few.Exp.Percentage, never.Exp.Percentage)
students <- c(never.md.Exp, few.md.Exp, intermed.md.Exp, expert.md.Exp)
markdown.expert.exp <- c(expert.md.Exp.Percentage, expert.md.Exp)
markdown.intermed.exp <- c(intermed.md.Exp.Percentage, intermed.md.Exp )
markdown.few.exp <- c(few.md.Exp.Percentage, few.md.Exp)
markdown.never.exp <- c(never.md.Exp.Percentage, never.md.Exp)
md.df <- data.frame(markdown.never.exp, markdown.few.exp,
markdown.intermed.exp, markdown.expert.exp)
colnames(stat.df) <- c("Never Coded", "Experimented with Code",
"Intermediate User", "Expert User")
row.names(stat.df) <- c("Percentage", "Students")
View(vcs.df)
View(md.df)
row.names(md.df) <- c("Percentage", "Students")
colnames(md.df) <- c("Never Coded", "Experimented with Code",
"Intermediate User", "Expert User")
row.names(md.df) <- c("Percentage", "Students")
#Data frame construction
md.percentages <- c(expert.md.Exp.Percentage, intermed.md.Exp.Percentage,
few.Exp.Percentage, never.Exp.Percentage)
md.students <- c(never.md.Exp, few.md.Exp, intermed.md.Exp, expert.md.Exp)
r.expert.exp <- c(expert.r.Exp.Percentage, expert.r.Exp)
r.intermed.exp <- c(intermed.r.Exp.Percentage, intermed.r.Exp )
#People with R experience
expert.R.Exp <- nrow(filter(survey.data, r_exp == 3))
intermed.R.Exp <- nrow(filter(survey.data, r_exp == 2))
few.R.Exp <- nrow(filter(survey.data, r_exp == 1))
never.R.Exp <- nrow(filter(survey.data, r_exp == 0))
#Percentage calculations for R
expert.R.Exp.Percentage <- paste0(round((expert.R.Exp / total.students) * 100, 0), "%")
intermed.R.Exp.Percentage <- paste0(round((intermed.R.Exp / total.students) * 100, 0), "%")
few.R.Percentage <- paste0(round((few.R.Exp / total.students) * 100, 0), "%")
never.R.Percentage <- paste0(round((never.R.Exp / total.students) * 100, 0), "%")
few.R.Exp.Percentage <- paste0(round((few.R.Exp / total.students) * 100, 0), "%")
never.R.Exp.Percentage <- paste0(round((never.R.Exp / total.students) * 100, 0), "%")
r.expert.exp <- c(expert.r.Exp.Percentage, expert.r.Exp)
r.intermed.exp <- c(intermed.r.Exp.Percentage, intermed.r.Exp )
r.few.exp <- c(few.r.Exp.Percentage, few.r.Exp)
few.R.Exp.Percentage <- paste0(round((few.R.Exp / total.students) * 100, 0), "%")
never.R.Exp.Percentage <- paste0(round((never.R.Exp / total.students) * 100, 0), "%")
r.expert.exp <- c(expert.r.Exp.Percentage, expert.r.Exp)
#People with R experience
expert.r.Exp <- nrow(filter(survey.data, r_exp == 3))
intermed.r.Exp <- nrow(filter(survey.data, r_exp == 2))
few.r.Exp <- nrow(filter(survey.data, r_exp == 1))
never.r.Exp <- nrow(filter(survey.data, r_exp == 0))
#People with R experience
expert.r.Exp <- nrow(filter(survey.data, r_exp == 3))
#Percentage calculations for r
expert.r.Exp.Percentage <- paste0(round((expert.r.Exp / total.students) * 100, 0), "%")
intermed.r.Exp.Percentage <- paste0(round((intermed.r.Exp / total.students) * 100, 0), "%")
few.r.Exp.Percentage <- paste0(round((few.r.Exp / total.students) * 100, 0), "%")
never.r.Exp.Percentage <- paste0(round((never.r.Exp / total.students) * 100, 0), "%")
r.expert.exp <- c(expert.r.Exp.Percentage, expert.r.Exp)
r.intermed.exp <- c(intermed.r.Exp.Percentage, intermed.r.Exp )
r.few.exp <- c(few.r.Exp.Percentage, few.r.Exp)
r.never.exp <- c(never.r.Exp.Percentage, never.r.Exp)
md.df <- data.frame(r.never.exp, r.few.exp,
r.intermed.exp, r.expert.exp)
colnames(md.df) <- c("Never Coded", "Experimented with Code",
"Intermediate User", "Expert User")
row.names(md.df) <- c("Percentage", "Students")
r.df <- data.frame(r.never.exp, r.few.exp,
r.intermed.exp, r.expert.exp)
colnames(md.df) <- c("Never Coded", "Experimented with Code",
"Intermediate User", "Expert User")
row.names(md.df) <- c("Percentage", "Students")
View(r.df)
colnames(md.df) <- c("Never Coded", "Experimented with Code",
"Intermediate User", "Expert User")
row.names(md.df) <- c("Percentage", "Students")
colnames(r.df) <- c("Never Coded", "Experimented with Code",
"Intermediate User", "Expert User")
row.names(r.df) <- c("Percentage", "Students")
#People with web programming experience
expert.web.Exp <- nrow(filter(survey.data, web_exp == 3))
intermed.web.Exp <- nrow(filter(survey.data, web_exp == 2))
few.web.Exp <- nrow(filter(survey.data, web_exp == 1))
never.web.Exp <- nrow(filter(survey.data, web_exp == 0))
#Percentage calculations for web experience
expert.web.Exp.Percentage <- paste0(round((expert.web.Exp / total.students) * 100, 0), "%")
intermed.web.Exp.Percentage <- paste0(round((intermed.web.Exp / total.students) * 100, 0), "%")
few.web.Exp.Percentage <- paste0(round((few.web.Exp / total.students) * 100, 0), "%")
never.web.Exp.Percentage <- paste0(round((never.web.Exp / total.students) * 100, 0), "%")
web.expert.exp <- c(expert.web.Exp.Percentage, expert.web.Exp)
web.intermed.exp <- c(intermed.web.Exp.Percentage, intermed.web.Exp )
web.few.exp <- c(few.web.Exp.Percentage, few.web.Exp)
web.never.exp <- c(never.web.Exp.Percentage, never.web.Exp)
web.df <- data.frame(web.never.exp, web.few.exp,
web.intermed.exp, web.expert.exp)
colnames(web.df) <- c("Never Coded", "Used code a few times",
"Intermediate User", "Expert User")
row.names(web.df) <- c("Percentage", "Students")
View(web.df)
# install.packages("dplyr")
library("dplyr")
# install.packages("knitr")
library("knitr")
# install.packages("maps")
library("maps")
setwd("/Users/Thea/Desktop/INFO 201 - ASSIGNMENTS/a6-collaboration-CaptainLenahan")
survey.data <- read.csv('./data/intro-survey.csv', stringsAsFactors = FALSE)
survey.data <- data.frame(survey.data)
# Create a data frame by selecting columns of programming experience,
# seahawks fan and info interest.
data.relationship <- survey.data %>%
select(programming_exp, seahawks_fan, info_interest) %>%
arrange(programming_exp)
is.data.frame(data.relationship)
coding.exp.builder <- function()
# Create a data frame that shows people who have none coding experience
never.code <- data.frame(nrow(filter(data.relationship, programming_exp == 1)))
never.code.big.seahawks.fan <- nrow(filter(never.code, seahawks_fan == "YES!!!"))
never.code.seahawks.fan <- filter(never.code, seahawks_fan == "Yes")
never.code.not.seahawks.fan <- filter(never.code, seahawks_fan == "No")
never.code.info.interest <- filter(never.code, info.interest == "Yes")
never.code.not.info.interest <- filter(never.code, info.interest == "No")
never.code.unknown.info.interest <- filter(never.code, info.interest == "N/A")
never.code.maybe.info.interest <- filter(never.code, info.interest == "Not sure")
# Create a data frame that shows people who have simple coding experience
simple.code <- data.frame(filter(data.relationship, programming_exp == 2))
simple.code.big.seahawks.fan <- filter(simple.code, seahawks_fan == "YES!!!")
simple.code.seahawks.fan <- filter(simple.code, seahawks_fan == "Yes")
simple.code.not.seahawks.fan <- filter(simple.code, seahawks_fan == "No")
simple.code.info.interest <- filter(simple.code, info.interest == "Yes")
simple.code.not.info.interest <- filter(simple.code, info.interest == "No")
simple.code.unknown.info.interest <- filter(simple.code, info.interest == "N/A")
simple.code.maybe.info.interest <- filter(simple.code, info.interest == "Not sure")
# Create a data frame that shows people who have some coding experience
some.code <- data.frame(filter(data.relationship, programming_exp == 3))
some.code.big.seahawks.fan <- filter(some.code, seahawks_fan == "YES!!!")
some.code.seahawks.fan <- filter(some.code, seahawks_fan == "Yes")
some.code.not.seahawks.fan <- filter(some.code, seahawks_fan == "No")
some.code.info.interest <- filter(some.code, info.interest == "Yes")
some.code.not.info.interest <- filter(some.code, info.interest == "No")
some.code.unknown.info.interest <- filter(some.code, info.interest == "N/A")
some.code.maybe.info.interest <- filter(some.code, info.interest == "Not sure")
# Create a data frame that shows people who have moderate coding experience
moderate.code <- data.frame(filter(data.relationship, programming_exp == 4))
moderate.code.big.seahawks.fan <- filter(moderate.code, seahawks_fan == "YES!!!")
moderate.code.seahawks.fan <- filter(moderate.code, seahawks_fan == "Yes")
moderate.code.not.seahawks.fan <- filter(moderate.code, seahawks_fan == "No")
moderate.code.info.interest <- filter(moderate.code, info.interest == "Yes")
moderate.code.not.info.interest <- filter(moderate.code, info.interest == "No")
moderate.code.unknown.info.interest <- filter(moderate.code, info.interest == "N/A")
moderate.code.maybe.info.interest <- filter(moderate.code, info.interest == "Not sure")
# Create a data frame that shows people who have lots of coding experience
lots.code <- data.frame(filter(data.relationship, programming_exp == 5))
lots.code.big.seahawks.fan <- filter(lots.code, seahawks_fan == "YES!!!")
lots.code.seahawks.fan <- filter(lots.code, seahawks_fan == "Yes")
lots.code.not.seahawks.fan <- filter(lots.code, seahawks_fan == "No")
lots.code.info.interest <- filter(lots.code, info.interest == "Yes")
lots.code.not.info.interest <- filter(lots.code, info.interest == "No")
lots.code.unknown.info.interest <- filter(lots.code, info.interest == "N/A")
lots.code.maybe.info.interest <- filter(lots.code, info.interest == "Not sure")
# Calculating the percentages
percentage.bigseahawksfan.never.code <- paste0(round((never.code.big.seahawks.fan / never.code) * 100), "%")
source("setup.R")
source("sectionOne.R")
View(survey.data)
survey.data
survey.data <- rename(survey.data, programming_exp = ï..programming_exp)
survey.data <- data.frame(survey.data)
# install.packages("dplyr")
library("dplyr")
# install.packages("knitr")
library("knitr")
# install.packages("maps")
library("maps")
install.packages("ggplot2")
library("ggplot2")
data.relationship <- survey.data %>%
select(programming_exp, seahawks_fan, info_interest) %>%
arrange(programming_exp)
is.data.frame(data.relationship)
View(survey.data)
View(data.relationship)
never.code <- data.frame(nrow(filter(data.relationship, programming_exp == 1)))
never.code.big.seahawks.fan <- nrow(filter(never.code, seahawks_fan == "YES!!!"))
never.code.seahawks.fan <- filter(never.code, seahawks_fan == "Yes")
never.code.not.seahawks.fan <- filter(never.code, seahawks_fan == "No")
never.code.info.interest <- filter(never.code, info.interest == "Yes")
never.code.not.info.interest <- filter(never.code, info.interest == "No")
never.code.unknown.info.interest <- filter(never.code, info.interest == "N/A")
never.code.maybe.info.interest <- filter(never.code, info.interest == "Not sure")
View(never.code)
# Create a data frame that shows people who have none coding experience
never.code <- data.frame(nrow(filter(data.relationship, programming_exp == 1)))
never.code.big.seahawks.fan <- nrow(filter(never.code, seahawks_fan == "YES!!!"))
code <- nrow(filter(data.relationship, programming_exp == 1))
code <- filter(data.relationship, programming_exp == 1)
View(code)
View(survey.data)
code.big.seahawks.fan <- nrow(filter(never.code, seahawks_fan == "YES!!!"))
View(code)
code.big.seahawks.fan <- nrow(filter(code, seahawks_fan == "YES!!!"))
View(never.code)
code <- filter(data.relationship, programming_exp == 1 &
(seahawks_fan == "YES!!!" || seahawks_fan == "Yes" ))
View(code)
code <- filter(data.relationship, programming_exp == 1 &&
(seahawks_fan == "YES!!!" || seahawks_fan == "Yes" ))
View(code)
code <- filter(data.relationship, programming_exp == 1 &
(seahawks_fan == "YES!!!" || seahawks_fan == "Yes" ))
code <- filter(data.relationship, programming_exp == 1 &
(seahawks_fan == "YES!!!" | seahawks_fan == "Yes" ))
code <- filter(data.relationship, programming_exp == 1 &
(seahawks_fan != "No" & info_interest == "No" ))
code <- filter(data.relationship, programming_exp == 1 &
(seahawks_fan != "Yes" & info_interest == "Yes" ))
code <- filter(data.relationship, programming_exp == 1 &
(seahawks_fan != "No" & info_interest == "Yes" ))
ggplot(data = data.relationship) +
geom_point(mapping = aes(x = programming_exp))
total.students <- nrow(filter(data.relationship, programming_exp == 1))
ggplot(data = code) +
geom_bar(mapping = aes(x = programming_exp))
#People who like sports, have an interest in info, and programming experience
code <- nrow(filter(data.relationship, programming_exp == 2 &
(seahawks_fan != "No" & info_interest == "Yes")))
ggplot(data = code) +
geom_bar(mapping = aes(x = programming_exp))
#People who like sports, have an interest in info, and programming experience
code <- filter(data.relationship, programming_exp == 1 &
(seahawks_fan != "No" & info_interest == "Yes"))
ggplot(data = code) +
geom_bar(mapping = aes(x = programming_exp))
#People who like sports, have an interest in info, and programming experience
code <- filter(data.relationship, programming_exp == 2 &
(seahawks_fan != "No" & info_interest == "Yes"))
ggplot(data = code) +
geom_bar(mapping = aes(x = programming_exp))
ggplot(data = data.relationship) +
geom_bar(mapping = aes(x = programming_exp))
ggplot(data = data.relationship) +
geom_point(mapping = aes(x = programming_exp, y = info_interest))
code <- groupby(programming_exp)
#People who like sports, have an interest in info, and programming experience
code <- group_by(programming_exp) %>% filter(data.relationship, programming_exp == 1)
#People who like sports, have an interest in info, and programming experience
code <- data.relationship %>% group_by(programming_exp)
View(code)
#People who like sports, have an interest in info, and programming experience
code <- data.relationship %>% group_by(seahawks_fan)
ggplot(data = data.relationship) +
geom_point(mapping = aes(x = info_interest, y = programming_exp))
shiny::runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
my.ui <- fluidPage(
#Creates a side bar that contains a selectInput bar and a slider.
#User selected inputs are reflected in the table.
sidebarLayout(
sidebarPanel(
selectInput("State", "Select A State",
choices = greenhouse.gases_df$Country.Code,
selected = ""),
sliderInput("years", "Select years to be shown",
min = 1998, max = 2014, value = 2007,
sep = "")
),
#Creates a main panel in which a table is desvcribed for user's information in a small paragraph
#as well as setting up tabs. One tab is KT emissions data, one for PC data, and the default tab is
#for all pprovided data on the user specified input contained within the data frame.
mainPanel(
titlePanel("GreenHouse Gasses Data"),
p("Below is a table that provides the Greenhouse gasses data of a user selected state
with a focus on CO2 emissions in metric tons per capita and CO2 emissions kt. The slider
takes in a user selected year and compares it with the most recent data for the selected
state code of that year."),
tabsetPanel(type = "tabs",
tabPanel("Table", DT::dataTableOutput("gTable")),
tabPanel("kt data",  DT::dataTableOutput("kt.table")),
tabPanel("per capita data",  DT::dataTableOutput("pc.table"))
),
tableFooter(("Key for table:"), )
?tableFooter
)
),
sidebarLayout(
sidebarPanel(
selectInput("emissions", "Emissions Type",
choices = c("Metric Tons Per Capita", "Kilotons Per Capita"),
selected = ""),
sliderInput("emission.year", "Year displayed",
min = 1998, max = 2014, value = 2007,
sep = ""),
p("Map Details", textOutput("description"))
),
mainPanel(
titlePanel("Map of Greenhouse Gasses in the World"),
textOutput("map.details"),
tabsetPanel(type = "tabs",
tabPanel("Selected Year Map",
plotOutput("map", click = clickOpts(id = "map_click"), width = "150%", height = "400px")
),
tabPanel("Most Recent Emissions",
plotOutput("map.current", click = clickOpts(id = "map_click"), width = "150%", height = "400px")
)
)
)
)
)
my.ui <- fluidPage(
#Creates a side bar that contains a selectInput bar and a slider.
#User selected inputs are reflected in the table.
sidebarLayout(
sidebarPanel(
selectInput("State", "Select A State",
choices = greenhouse.gases_df$Country.Code,
selected = ""),
sliderInput("years", "Select years to be shown",
min = 1998, max = 2014, value = 2007,
sep = "")
),
#Creates a main panel in which a table is desvcribed for user's information in a small paragraph
#as well as setting up tabs. One tab is KT emissions data, one for PC data, and the default tab is
#for all pprovided data on the user specified input contained within the data frame.
mainPanel(
titlePanel("GreenHouse Gasses Data"),
p("Below is a table that provides the Greenhouse gasses data of a user selected state
with a focus on CO2 emissions in metric tons per capita and CO2 emissions kt. The slider
takes in a user selected year and compares it with the most recent data for the selected
state code of that year."),
tabsetPanel(type = "tabs",
tabPanel("Table", DT::dataTableOutput("gTable")),
tabPanel("kt data",  DT::dataTableOutput("kt.table")),
tabPanel("per capita data",  DT::dataTableOutput("pc.table"))
),
tableFooter(("Key for table:"), )
?tableFooter()
)
),
sidebarLayout(
sidebarPanel(
selectInput("emissions", "Emissions Type",
choices = c("Metric Tons Per Capita", "Kilotons Per Capita"),
selected = ""),
sliderInput("emission.year", "Year displayed",
min = 1998, max = 2014, value = 2007,
sep = ""),
p("Map Details", textOutput("description"))
),
mainPanel(
titlePanel("Map of Greenhouse Gasses in the World"),
textOutput("map.details"),
tabsetPanel(type = "tabs",
tabPanel("Selected Year Map",
plotOutput("map", click = clickOpts(id = "map_click"), width = "150%", height = "400px")
),
tabPanel("Most Recent Emissions",
plotOutput("map.current", click = clickOpts(id = "map_click"), width = "150%", height = "400px")
)
)
)
)
)
my.ui <- fluidPage(
#Creates a side bar that contains a selectInput bar and a slider.
#User selected inputs are reflected in the table.
sidebarLayout(
sidebarPanel(
selectInput("State", "Select A State",
choices = greenhouse.gases_df$Country.Code,
selected = ""),
sliderInput("years", "Select years to be shown",
min = 1998, max = 2014, value = 2007,
sep = "")
),
#Creates a main panel in which a table is desvcribed for user's information in a small paragraph
#as well as setting up tabs. One tab is KT emissions data, one for PC data, and the default tab is
#for all pprovided data on the user specified input contained within the data frame.
mainPanel(
titlePanel("GreenHouse Gasses Data"),
p("Below is a table that provides the Greenhouse gasses data of a user selected state
with a focus on CO2 emissions in metric tons per capita and CO2 emissions kt. The slider
takes in a user selected year and compares it with the most recent data for the selected
state code of that year."),
tabsetPanel(type = "tabs",
tabPanel("Table", DT::dataTableOutput("gTable")),
tabPanel("kt data",  DT::dataTableOutput("kt.table")),
tabPanel("per capita data",  DT::dataTableOutput("pc.table"))
),
tableFooter(("Key for table:") )
)
),
sidebarLayout(
sidebarPanel(
selectInput("emissions", "Emissions Type",
choices = c("Metric Tons Per Capita", "Kilotons Per Capita"),
selected = ""),
sliderInput("emission.year", "Year displayed",
min = 1998, max = 2014, value = 2007,
sep = ""),
p("Map Details", textOutput("description"))
),
mainPanel(
titlePanel("Map of Greenhouse Gasses in the World"),
textOutput("map.details"),
tabsetPanel(type = "tabs",
tabPanel("Selected Year Map",
plotOutput("map", click = clickOpts(id = "map_click"), width = "150%", height = "400px")
),
tabPanel("Most Recent Emissions",
plotOutput("map.current", click = clickOpts(id = "map_click"), width = "150%", height = "400px")
)
)
)
)
)
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
?toggleState()
useShinyjs(rmd = TRUE)
install.packages("shinyjs")
library("shinyjs")
useShinyjs(rmd = TRUE)
runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/a7-data-app-CaptainLenahan')
library(shiny); runApp('C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/INFO201Final/iliFactor.R')
flu.mortality.ili.data.year <- flu.mortality.ili.data
setwd("C:/Users/Captain Lenahan/OneDrive - UW/Info201HW/INFO201Final")
runApp('iliFactor.R')
flu.mortality.ili.data.year <- flu.mortality.ili.data
ili.data.2015.2016 <- read.csv("./data/Washington_FluView_BySeason_2015-2016.csv", stringsAsFactors = FALSE)
ili.data.2017.2018 <- read.csv("./data/Washington_FluView_BySeason_2017-2018.csv", stringsAsFactors = FALSE)
flu.mortality.2015.2018 <- read.csv("./data/PedFluDeath_WeeklyData_2015-2018.csv", stringsAsFactors = FALSE)
source("setup.R")
ili.data <- full_join(ili.data.2015.2016, ili.data.2017.2018)
ili.data <- ili.data %>% select(YEAR, WEEK, ILITOTAL, TOTAL.PATIENTS,
X.UNWEIGHTED.ILI, NUM..OF.PROVIDERS) %>%
rename(PERCENT_UNWEIGHTED_ILI = X.UNWEIGHTED.ILI,
NUMBER_OF_PROVIDERS = NUM..OF.PROVIDERS)
#Contains flu mortality as well as ili reported cases
flu.mortality.ili.data <- na.omit(full_join(flu.mortality.2015.2018, ili.data))
flu.mortality.ili.data <- flu.mortality.ili.data %>% mutate(DEATH_RATE = (PREVIOUS.WEEKS.DEATHS /
YEAR.TOTAL.DEATHS) * 100)
runApp('iliFactor.R')
flu.mortality.ili.data.year <- flu.mortality.ili.data
runApp('iliFactor.R')
runApp('iliFactor.R')
runApp('iliFactor.R')
runApp('iliFactor.R')
runApp('iliFactor.R')
runApp('iliFactor.R')
runApp('iliFactor.R')
runApp('iliFactor.R')
runApp('iliFactor.R')
runApp('iliFactor.R')
runApp('iliFactor.R')
